---
interface Item {
  title: string;
   prompt: string;
  description: string;
  technologies?: string[];
}

interface Props { items: Item[], icons?: { job: string; company: string; location: string }, centered?: boolean }
// fallback icons from assets if not provided via props
// @ts-ignore - vite raw import yields string
import jobIconRaw from '../../../assets/icons/job-title-icon.svg?raw';
// @ts-ignore
import companyIconRaw from '../../../assets/icons/company-icon.svg?raw';
// @ts-ignore
import locationIconRaw from '../../../assets/icons/location-icon.svg?raw';

function normalizeIcon(raw: string): string {
  let s = raw
    .replace(/<\?xml[\s\S]*?\?>/g, '')
    .replace(/<!--([\s\S]*?)-->/g, '')
    .replace(/width=\"[^\"]+\"/g, 'width="16"')
    .replace(/height=\"[^\"]+\"/g, 'height="16"')
    .replace(/stroke=\"#000000\"/g, 'stroke="currentColor"')
    .replace(/fill=\"#000000\"/g, 'fill="none"')
    .replace(/fill=\"#ffffff\"/gi, 'fill="none"');
  // Ensure root svg has fill="none" and stroke="currentColor"
  s = s.replace(/<svg([^>]*)>/, (m, attrs) => {
    let a = attrs;
    if (!/fill=/.test(a)) a += ' fill="none"';
    if (!/stroke=/.test(a)) a += ' stroke="currentColor"';
    return `<svg${a}>`;
  });
  return s;
}

const props = Astro.props as Props;
const jobIcon = (props.icons?.job ?? normalizeIcon(jobIconRaw));
const companyIcon = (props.icons?.company ?? normalizeIcon(companyIconRaw));
const locationIcon = (props.icons?.location ?? normalizeIcon(locationIconRaw));
const { items, centered = true } = props;
---

{centered ? (
  <div class="relative mx-auto max-w-5xl px-0 md:px-0">
    <!-- Center vertical line -->
    <div class="pointer-events-none absolute inset-y-0 left-1/2 w-px -translate-x-1/2 bg-[var(--border)]"></div>

    <div class="space-y-12">
      {items.map((item, index) => {
        const isLeft = index % 2 === 0;
        return (
          <div class:list={[
            'relative flex items-stretch',
            isLeft ? 'justify-start' : 'justify-end',
          ]}>
            <!-- Dot on the center line -->
            <div class="absolute left-1/2 -translate-x-1/2 top-4 size-3 rounded-full bg-[var(--accent)] ring-4 ring-[color:var(--background)]"></div>

            <div class:list={[
              'w-full md:w-1/2',
              isLeft ? 'pr-6 md:pr-12' : 'pl-6 md:pl-12',
            ]}>
              <div class="card-surface p-6">
                <div class="mb-2 space-y-1">
                  <h3 class="text-xs leading-snug font-semibold m-0 flex items-center gap-2">
                    <span class="inline-flex" aria-hidden="true" set:html={jobIcon} />
                    {item.title}
                  </h3>
               
                  <p class="text-sm text-[color:var(--color-text-muted)] m-0 flex items-center gap-2">
                    <span class="inline-flex" aria-hidden="true" set:html={locationIcon} />
                    {item.prompt}
                  </p>
                </div>
                <p class="text-[color:var(--color-text-secondary)] m-0">{item.description}</p>
                {item.technologies && item.technologies.length > 0 && (
                  <div class="mt-3 flex flex-wrap gap-2">
                    {item.technologies.map((tech) => (
                      <span class="inline-flex items-center rounded-full px-3 py-1 text-xs font-medium" style="background: rgba(var(--accent-rgb),0.1); color: var(--accent); border: 1px solid rgba(var(--accent-rgb),0.3);">
                        {tech}
                      </span>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        );
      })}
    </div>
  </div>
) : (
    <div class="relative mx-auto max-w-5xl px-0 md:px-0">
    <!-- Left vertical line -->
    <div class="pointer-events-none absolute inset-y-0 left-0 md:left-5 w-px bg-[var(--border)]"></div>
    <div class="space-y-8 md:space-y-12">
      {items.map((item) => (
        <div class="relative pl-5 md:pl-16">
          <div class="absolute left-0 md:left-5 top-3 md:top-4 size-2 md:size-3 rounded-full bg-[var(--accent)] ring-2 md:ring-4 ring-[color:var(--background)]"></div>
          <div class="card-surface p-4 md:p-6 w-full min-w-0">
            <div class="mb-2 space-y-1">
              <h3 class="text-xs leading-snug font-semibold m-0 flex items-center gap-2">
                <span class="inline-flex" aria-hidden="true" set:html={jobIcon} />
                {item.title}
              </h3>
    
              <p class="text-sm text-[color:var(--color-text-muted)] m-0 flex items-center gap-2">
                <span class="inline-flex" aria-hidden="true" set:html={locationIcon} />
                {item.prompt}
              </p>
            </div>
            <p class="text-[color:var(--color-text-secondary)] m-0">{item.description}</p>
            {item.technologies && item.technologies.length > 0 && (
              <div class="mt-3 flex flex-wrap gap-2">
                {item.technologies.map((tech) => (
                  <span class="inline-flex items-center rounded-full px-3 py-1 text-xs font-medium" style="background: rgba(var(--accent-rgb),0.1); color: var(--accent); border: 1px solid rgba(var(--accent-rgb),0.3);">
                    {tech}
                  </span>
                ))}
              </div>
            )}
          </div>
        </div>
      ))}
    </div>
  </div>
)}



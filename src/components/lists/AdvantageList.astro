---
  import { advantagesData } from "../../data/advantages";
 import ChevronDown from "lucide-static/icons/chevron-down.svg";
const ICON_COLOR = "#41BDF5"; // tvoja farba
const ICON_STROKE = 3; // „bold“ efekt

interface Props { itemsCount: number, centered?: boolean, allOpen: boolean, firstOpen: boolean }
 
 
const props = Astro.props as Props;
  
---

{props.centered ? (
  <div class="relative mx-auto max-w-5xl px-0 md:px-0">
    <!-- Center vertical line -->
    <div class="pointer-events-none absolute inset-y-0 left-1/2 w-px -translate-x-1/2 bg-[var(--border)]"></div>

    <div class="space-y-12">
      {advantagesData.slice(0, props.itemsCount).map((item, index) => {
        const isLeft = index % 2 === 0;
            const Icon =item.icon;

         return (
          <div class:list={[
            'relative flex items-stretch',
            isLeft ? 'justify-start' : 'justify-end',
          ]}>
            <!-- Dot on the center line -->
            <div class="absolute left-1/2 -translate-x-1/2 top-4 size-3 rounded-full bg-[var(--accent)] ring-4 ring-[color:var(--background)]"></div>

            <div class:list={[
              'w-full md:w-1/2',
              isLeft ? 'pr-6 md:pr-12' : 'pl-6 md:pl-12',
            ]}>
              <div class="card-surface p-6">
               <details class="group"  {...(((index === 0 && props.firstOpen === true) || props.allOpen === true) ? { open: true } : {})}>
          <summary   class={`flex flex-col items-center text-center p-6 relative `}>

                  <div class={`w-full justify-end flex pb-2 text-[var(--accent)] [&>svg]:w-6 [&>svg]:h-6  ${props.centered ? "justify-center" : "justify-end"}`}>
                    <Icon style={`stroke:${ICON_COLOR}; stroke-width:${ICON_STROKE}`}  />
                  </div>
                  <div class="mb-2 space-y-1">
                    <h3 class="text-xs leading-snug font-semibold m-0 flex items-center gap-2">
                      {item.title}
                    </h3>
                
                    <p class="text-sm text-[color:var(--color-text-muted)] m-0 flex items-center gap-2">
                      {item.prompt}
                    </p>
                  </div>
                             <ChevronDown class="w-5 h-5 transition-transform group-open:rotate-180  stroke-[#41BDF5] stroke-[5]"  />

        </summary>
            <p class=" text-justify  text-[color:var(--color-text-secondary)] m-0">{item.description}</p>
      
                {item.notes && item.notes.length > 0 && (

                    <div class="mt-3 flex flex-col gap-2">
                      <p class=" text-[color:var(--color-text-muted)]">
                        {"Príklady použitia:"}
                      </p>
                        <ul class="list-disc ml-5 text-[color:var(--color-text-secondary)]">
                            {item.notes.map((note) => (
                            <li class="text-[color:var(--color-text-secondary)] list-disc ml-2 md:ml-5">
                              {note}
                            </li> ))}
                        </ul>
                    </div>
                  )}
                </details>

                {item.technologies && item.technologies.length > 0 && (
                  <div class="mt-3 flex flex-wrap gap-2">
                    {item.technologies.map((tech) => (
                      <span class="inline-flex items-center rounded-full px-3 py-1 text-xs font-medium" style="background: rgba(var(--accent-rgb),0.1); color: var(--accent); border: 1px solid rgba(var(--accent-rgb),0.3);">
                        {tech}
                      </span>
                    ))}
                  </div>
                )}
                
              </div>
            </div>
          </div>
        );
      })}
    </div>
  </div>
) : (
    <div class="relative mx-auto max-w-5xl px-0 md:px-0">
    <!-- Left vertical line -->
    <div class="pointer-events-none absolute inset-y-0 left-0 md:left-5 w-px bg-[var(--border)]"></div>
    <div class="space-y-8 md:space-y-12">
      {advantagesData.slice(0, props.itemsCount).map((item, index) => {

    const Icon =item.icon;

return(
        <div class="relative pl-3 md:pl-16" >
          <div class="absolute left-0 md:left-5 top-3 md:top-4 size-2 md:size-3 rounded-full bg-[var(--accent)] ring-2 md:ring-4 ring-[color:var(--background)]"></div>
          <div class="card-surface p-4 md:p-6 w-full min-w-0" 
 >
            <div class={`w-full flex pb-2 text-[var(--accent)] [&>svg]:w-6 [&>svg]:h-6  ${props.centered ? "justify-center" : "justify-end"}`}>
                 <Icon style={`stroke:${ICON_COLOR}; stroke-width:${ICON_STROKE}`}  />
              </div>
          <details class="group"  {...(((index === 0 && props.firstOpen === true) || props.allOpen === true) ? { open: true } : {})}>
          <summary   class={`flex flex-col items-center justify-center text-center p-6 relative `}>
            <div class="mb-2 space-y-1 items-center justify-center" >
                  

              <h3 class="text-xs leading-snug font-semibold m-0 flex items-center text-center justify-center gap-2">
                {item.title}
              </h3>
    
              <p class="text-sm text-[color:var(--color-text-muted)] m-0 flex items-center text-center justify-center gap-2">
                {item.prompt}
              </p>
            </div>
           <ChevronDown class="w-5 h-5 transition-transform group-open:rotate-180  stroke-[#41BDF5] stroke-[5]"  />

          </summary>
          
          <p class=" text-justify  text-[color:var(--color-text-secondary)] m-0">{item.description}</p>
 
          { item.notes && item.notes.length > 0 && (

              <div class="mt-3 flex flex-col gap-2">
                 <p class=" text-[color:var(--color-text-muted)]">
                   {"Príklady použitia:"}
                </p>
                  <ul class="list-disc text-justify ml-0 text-[color:var(--color-text-secondary)]">
                      {item.notes.map((note) => (
                      <li class="text-[color:var(--color-text-secondary)] list-disc ml-5">
                        {note}
                      </li> ))}
                  </ul>
              </div>
            )}

         </details>
          {item.technologies && item.technologies.length > 0 && (
              <div class="mt-5 flex flex-wrap gap-2">
                {item.technologies.map((tech) => (
                  <span class="inline-flex items-center rounded-full px-3 py-1 text-xs font-medium" style="background: rgba(var(--accent-rgb),0.1); color: var(--accent); border: 1px solid rgba(var(--accent-rgb),0.3);">
                    {tech}
                  </span>
                ))}
              </div>
            )}

          </div>
        </div>



      )})}
    </div>
  </div>
)}


